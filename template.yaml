AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Smart Home

Globals:
  Function:
    Timeout: 300

Parameters:
  LineChannelSecret:
    Type: String
    NoEcho: true
  LineChannelAccessToken:
    Type: String
    NoEcho: true
  SmartHomeAccessToken:
    Type: String
    NoEcho: true
  RemoAccessToken:
    Type: String
    NoEcho: true
  RemoApplianceId:
    Type: String
    NoEcho: true
  RedisHost:
    Type: String
    NoEcho: true
  RedisPort:
    Type: String
    NoEcho: true
  RedisPassword:
    Type: String
    NoEcho: true
  InfluxDBUrl:
    Type: String
    NoEcho: true
  InfluxDBToken:
    Type: String
    NoEcho: true
  InfluxDBOrganization:
    Type: String
    NoEcho: true
  InfluxDBBucket:
    Type: String
    NoEcho: true
  S3Bucket:
    Type: String
    NoEcho: true
  TuyaDeviceId:
    Type: String
    NoEcho: true
  TuyaLocalKey:
    Type: String
    NoEcho: true
  TuyaIpAddress:
    Type: String
    NoEcho: true
  IotCoreEndpoint:
    Type: String
    NoEcho: true
  LineMasterUserId:
    Type: String
    NoEcho: true
  SpreadSheetId:
    Type: String
    NoEcho: true
  SpreadSheetRange:
    Type: String
    NoEcho: true

Resources:
  LineBotRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LineBotPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  QoAirRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: QoAirPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  GraphRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GraphPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Bucket}*"              
  CronJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CronJobPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  LineBot:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-LineBot
      CodeUri: linebot/
      Handler: app.lambda_handler
      Role: !GetAtt LineBotRole.Arn
      Runtime: python3.8
      Events:
        LineBot:
          Type: Api
          Properties:
            Path: /api/v1/linebot
            Method: post
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          LINE_CHANNEL_SECRET: !Ref LineChannelSecret
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LineChannelAccessToken
  AirControl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-AirControl
      CodeUri: aircontrol/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        AirControl:
          Type: Api
          Properties:
            Path: /api/v1/aircontrol
            Method: post
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          REMO_ACCESS_TOKEN: !Ref RemoAccessToken
          REMO_APPLIANCE_ID: !Ref RemoApplianceId
  QoAir:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-QoAir
      CodeUri: qoair/
      Handler: app.lambda_handler
      Role: !GetAtt QoAirRole.Arn
      Runtime: python3.8
      Events:
        AirControl:
          Type: Api
          Properties:
            Path: /api/v1/qoair
            Method: post
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: !Ref RedisPort
          REDIS_PASSWORD: !Ref RedisPassword
  Graph:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-Graph
      CodeUri: graph/
      Handler: app.lambda_handler
      Role: !GetAtt GraphRole.Arn
      Runtime: python3.8
      MemorySize: 320
      Environment:
        Variables:
          INFLUXDB_URL: !Ref InfluxDBUrl
          INFLUXDB_TOKEN: !Ref InfluxDBToken
          INFLUXDB_ORGANIZATION: !Ref InfluxDBOrganization
          INFLUXDB_BUCKET: !Ref InfluxDBBucket
          S3_BUCKET: !Ref S3Bucket
  LineBotPush:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-LineBot-Push
      CodeUri: linebot-push/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LineChannelAccessToken
  Humidifier:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-Humidifier
      CodeUri: humidifier/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          IOT_CORE_ENDPOINT: !Ref IotCoreEndpoint
          TUYA_DEVICE_ID: !Ref TuyaDeviceId
          TUYA_LOCAL_KEY: !Ref TuyaLocalKey
          TUYA_IP_ADDRESS: !Ref TuyaIpAddress
  CronJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-CronJob
      CodeUri: cronjob/
      Handler: app.lambda_handler
      Role: !GetAtt CronJobRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          LINE_MASTER_USER_ID: !Ref LineMasterUserId
  Accounting:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMARTHOME-Accounting
      CodeUri: accounting/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SMARTHOME_ACCESS_TOKEN: !Ref SmartHomeAccessToken
          SPREADSHEET_ID: !Ref SpreadSheetId
          SPREADSHEET_RANGE: !Ref SpreadSheetRange
